{"title":"TS类型体操刷题tips","date":"2022-08-27T14:14:33.000Z","date_formatted":{"ll":"Aug 27, 2022","L":"08/27/2022","MM-DD":"08-27"},"link":"2022/08/27/TS类型体操刷题tips","comments":true,"tags":["TypeScript"],"categories":["front-end"],"updated":"2023-07-11T08:54:19.192Z","content":"<p><s>类型的运算结果都可以用接口来表示</s> —— type 声明才是万能的</p>\n<h2 id=\"重载的简写\">重载的简写<a title=\"#重载的简写\" href=\"#重载的简写\"></a></h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">is</span>: &#123;</span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">state</span>: <span class=\"built_in\">boolean</span> | <span class=\"literal\">undefined</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125; = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, ...args: [<span class=\"built_in\">boolean</span> | <span class=\"literal\">undefined</span>] | []</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = args.<span class=\"property\">length</span> &gt;= <span class=\"number\">1</span> ? args[<span class=\"number\">0</span>]! : <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> name &amp;&amp; state ? <span class=\"string\">`<span class=\"subst\">$&#123;statePrefix&#125;</span><span class=\"subst\">$&#123;name&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">B</span>: &#123;</span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">state</span>: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125; = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, ...args: [<span class=\"built_in\">boolean</span>] | []</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, ...args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ss&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">B</span>(<span class=\"string\">&quot;cdjk&quot;</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"title function_\">B</span>(<span class=\"string\">&quot;dfs&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型中-extends-的约束\">泛型中 extends 的约束<a title=\"#泛型中-extends-的约束\" href=\"#泛型中-extends-的约束\"></a></h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyPick</span>&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> K]: T[P] </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是 K 是一个 union，keyof T 也将 T 中的属性转换为一个 union。当我们使用 extends 来进行条件约束的时候，TS 会使用 union <code>分发</code> 的特性自动遍历 union K 中的属性与 keyof T 中的属性进行比较。</p>\n<p>假设 K 为 ‘title’ | ‘completed’ | ‘invalid’ ，T 为 ‘title’ | ‘completed’ | ‘description’。它的过程如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">step1</span>:  <span class=\"string\">&#x27;title&#x27;</span> <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;title&#x27;</span> | <span class=\"string\">&#x27;completed&#x27;</span> | <span class=\"string\">&#x27;description&#x27;</span> <span class=\"comment\">//通过</span></span><br><span class=\"line\"><span class=\"attr\">step2</span>:  <span class=\"string\">&#x27;completed&#x27;</span> <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;title&#x27;</span> | <span class=\"string\">&#x27;completed&#x27;</span> | <span class=\"string\">&#x27;description&#x27;</span> <span class=\"comment\">//通过</span></span><br><span class=\"line\"><span class=\"attr\">step3</span>:  <span class=\"string\">&#x27;invalid&#x27;</span> <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;title&#x27;</span> | <span class=\"string\">&#x27;completed&#x27;</span> | <span class=\"string\">&#x27;description&#x27;</span> <span class=\"comment\">//未通过，报错</span></span><br></pre></td></tr></table></figure>\n<p>如果比较成功则通过，失败则报错，这样我们就实现了所有的关键步骤，通过了所有的测试用例。</p>\n<h2 id=\"keyof-any\">keyof any<a title=\"#keyof-any\" href=\"#keyof-any\"></a></h2>\n<blockquote>\n<p>Record&lt;K, V&gt;</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyRecord</span>&lt;K  <span class=\"keyword\">extends</span> keyof <span class=\"built_in\">any</span>, V&gt; = &#123;</span><br><span class=\"line\">  [key <span class=\"keyword\">in</span> K]: V</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意对象的键值只能是 <code>number | string | symbol</code> ,所以 K 需要被约束</p>\n<p>同时，可以使用 <code>keyof any</code> 来代替 <code>number | string | symbol</code> ，它返回对象键值类型的所有可能</p>\n<h2 id=\"接口或者枚举类型中的-never\">接口或者枚举类型中的 never<a title=\"#接口或者枚举类型中的-never\" href=\"#接口或者枚举类型中的-never\"></a></h2>\n<blockquote>\n<p>Omit&lt;T, K&gt;</p>\n</blockquote>\n<p>使用 <code>as never</code> 来使一个元素消失。</p>\n<p>在 TS 中如果一个 union 中的元素是一个 never 类型的，那么 TS 认为这个元素是一个空值，会返回去除这个值之后的结果。</p>\n<h2 id=\"infer-的使用\">infer 的使用<a title=\"#infer-的使用\" href=\"#infer-的使用\"></a></h2>\n<blockquote>\n<p>Parameters&lt; T &gt;</p>\n</blockquote>\n<p>在这个条件语句 <code>T extends (...args: infer P) =&gt; any ? P : T</code> 中，<code>infer P</code> 表示待推断的函数参数。</p>\n<p>整句含义为：如果 <code>T</code> 能赋值给 <code>(...args: infer P) =&gt; any</code>，则结果是 <code>(...args: infer P) =&gt; any</code> 类型中的参数 <code>P</code>，否则返回为 <code>T</code></p>\n<p>infer 的作用：在条件类型语句中，可以用 <code>infer</code> 声明一个类型变量并且对它进行使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyParameters</span>&lt;T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">any</span>&gt; = T <span class=\"keyword\">extends</span> (...<span class=\"attr\">args</span>: infer P) =&gt; <span class=\"built_in\">any</span> ? P : <span class=\"built_in\">never</span>;</span><br></pre></td></tr></table></figure>\n<p>以上代码中 <code>infer R</code> 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。</p>\n<h2 id=\"类中构造器的类型声明方式\">类中构造器的类型声明方式<a title=\"#类中构造器的类型声明方式\" href=\"#类中构造器的类型声明方式\"></a></h2>\n<blockquote>\n<p>ConstructorParameters&lt; T &gt;</p>\n</blockquote>\n<p><code>c:&#123; new(): T &#125;</code> 和 <code>c: new () =&gt; T</code> 是一样的，后者是前者的简写，意即 C 的类型是对象类型且这个对象包含返回类型是 T(类的实例) 的构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es6, T === new People()</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span>: <span class=\"keyword\">new</span> () =&gt; T &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">People</span> = <span class=\"comment\">/*#__PURE__*/</span><span class=\"title function_\">_createClass</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">People</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">_classCallCheck</span>(<span class=\"variable language_\">this</span>, <span class=\"title class_\">People</span>);</span><br><span class=\"line\">  <span class=\"title function_\">_defineProperty</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"title function_\">_defineProperty</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&quot;age&quot;</span>, <span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串字面量和递归\">字符串字面量和递归<a title=\"#字符串字面量和递归\" href=\"#字符串字面量和递归\"></a></h2>\n<p>看到递归的时候，才真正意识到 ts 也是一门编程语言，而不是什么类型的银弹（silver bullet）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">LastChar</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>&gt; =</span><br><span class=\"line\"> T <span class=\"keyword\">extends</span> <span class=\"string\">`<span class=\"subst\">$&#123;infer F&#125;</span><span class=\"subst\">$&#123;infer R&#125;</span>`</span> ?</span><br><span class=\"line\">  (R <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;&#x27;</span> ? F : <span class=\"title class_\">LastChar</span>&lt;R&gt;) : <span class=\"built_in\">never</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元祖类型的属性-length\">元祖类型的属性 length<a title=\"#元祖类型的属性-length\" href=\"#元祖类型的属性-length\"></a></h2>\n<blockquote>\n<p>LengthOfTuple&lt; T &gt;</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">LengthOfTuple</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>[]&gt; = T[<span class=\"string\">&#x27;length&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-t-extends-${infer-l}.${infer-r}\">关于 T extends <code>$&#123;infer L&#125;.$&#123;infer R&#125;</code><a title=\"#关于-t-extends-${infer-l}.${infer-r}\" href=\"#关于-t-extends-${infer-l}.${infer-r}\"></a></h2>\n<p>如果 T extends 字面量，则 R 表示剩余参数<br>\n如果 T extends 元祖，则 R 表示第二个参数</p>\n<h2 id=\"关于-record&lt;string,-unknown&gt;\">关于 Record&lt;string, unknown&gt;<a title=\"#关于-record&lt;string,-unknown&gt;\" href=\"#关于-record&lt;string,-unknown&gt;\"></a></h2>\n<blockquote>\n<p>implement IsEmptyType&lt; T &gt;</p>\n</blockquote>\n<p><code>Record&lt;string, unknown&gt;</code> 表示任意对象类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先判断是不是对象类型</span></span><br><span class=\"line\"><span class=\"comment\">// 其次判断对象的键为空</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IsEmptyType</span>&lt;T&gt; =</span><br><span class=\"line\">  T <span class=\"keyword\">extends</span> <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">unknown</span>&gt; ?</span><br><span class=\"line\">    [keyof T] <span class=\"keyword\">extends</span> [<span class=\"built_in\">never</span>] ?</span><br><span class=\"line\">      <span class=\"literal\">true</span> : <span class=\"literal\">false</span></span><br><span class=\"line\">    : <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"any类型如何表示\">any类型如何表示<a title=\"#any类型如何表示\" href=\"#any类型如何表示\"></a></h2>\n<blockquote>\n<h1 id=\"implement-isany&lt;-t-&gt;\">implement IsAny&lt; T &gt;<a title=\"#implement-isany&lt;-t-&gt;\" href=\"#implement-isany&lt;-t-&gt;\"></a></h1>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 想写出这道题必须了解：any 类型在和其他类型进行联合、交叉时等于 any 类型自身</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">WhatEverType</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">AnotherWhatEverType</span> = [];</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">WhatEverType</span> &amp; <span class=\"built_in\">any</span>; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"title class_\">WhatEverType</span> | <span class=\"built_in\">any</span>; <span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T = <span class=\"title class_\">WhatEverType</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnotherWhatEverType</span> &amp; <span class=\"built_in\">any</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Q = <span class=\"title class_\">WhatEverType</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnotherWhatEverType</span> | <span class=\"built_in\">any</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IsAny</span>&lt;T&gt; = <span class=\"title class_\">WhatEverType</span> <span class=\"keyword\">extends</span> (<span class=\"title class_\">AnotherWhatEverType</span> &amp; T) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IsAny</span>&lt;T&gt; = <span class=\"number\">0</span> <span class=\"keyword\">extends</span> <span class=\"number\">1</span> &amp; T ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"关于图灵完备","link":"2022/11/03/关于图灵完备"},"next":{"title":"SSL建立的三个随机数作用","link":"2022/05/27/SSL建立的三个随机数作用"},"plink":"https://becase.top/2022/08/27/TS类型体操刷题tips/","toc":[{"id":"重载的简写","title":"重载的简写","index":"1"},{"id":"泛型中-extends-的约束","title":"泛型中 extends 的约束","index":"2"},{"id":"keyof-any","title":"keyof any","index":"3"},{"id":"接口或者枚举类型中的-never","title":"接口或者枚举类型中的 never","index":"4"},{"id":"infer-的使用","title":"infer 的使用","index":"5"},{"id":"类中构造器的类型声明方式","title":"类中构造器的类型声明方式","index":"6"},{"id":"字符串字面量和递归","title":"字符串字面量和递归","index":"7"},{"id":"元祖类型的属性-length","title":"元祖类型的属性 length","index":"8"},{"id":"关于-t-extends-${infer-l}.${infer-r}","title":"关于 T extends ${infer L}.${infer R}","index":"9"},{"id":"关于-record<string,-unknown>","title":"关于 Record&lt;string, unknown&gt;","index":"10"},{"id":"any类型如何表示","title":"any类型如何表示","index":"11"}],"reading_time":"1011 words in 7 min"}