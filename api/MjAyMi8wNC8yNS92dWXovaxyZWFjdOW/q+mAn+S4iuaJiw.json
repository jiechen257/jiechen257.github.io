{"title":"vue转react快速上手","date":"2022-04-25T21:52:01.000Z","date_formatted":{"ll":"Apr 25, 2022","L":"04/25/2022","MM-DD":"04-25"},"link":"2022/04/25/vue转react快速上手","comments":true,"tags":["react"],"categories":["front-end"],"updated":"2023-07-11T08:54:19.192Z","content":"<h2 id=\"jsx\">JSX<a title=\"#jsx\" href=\"#jsx\"></a></h2>\n<p>先介绍 React 唯一的一个语法糖：JSX。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;box&#x27;</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;content&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;title&#x27;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的 DOM 结构可以看出，要每个标签只有 3 个信息：标签名、属性、子元素，所以上面等同于下面的 JSON 结构：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  tag<span class=\"punctuation\">:</span> &#x27;div&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  attrs<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> className<span class=\"punctuation\">:</span> &#x27;box&#x27;<span class=\"punctuation\">,</span> id<span class=\"punctuation\">:</span> &#x27;content&#x27;<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      tag<span class=\"punctuation\">:</span> &#x27;div&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      arrts<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> className<span class=\"punctuation\">:</span> &#x27;title&#x27; <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;Hello&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      tag<span class=\"punctuation\">:</span> &#x27;button&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      attrs<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      children<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;Click&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>当你写下这个 React 组件时：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.hello&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终会被自动工具翻译成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>, <span class=\"literal\">null</span>, props.<span class=\"property\">hello</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>理解 JSX 语法并不困难，简单记住一句话，遇到 <code>&#123;&#125;</code> 符号内部解析为 JS 代码，遇到成对的 <code>&lt;&gt;</code> 符号内部解析为 HTML 代码。React 就是通过这个小小语法糖，实现在 JS 里面写 HTML，可能有小伙伴会说 HTML 与 JS 分离不是更好吗？责职分明，混合只会更乱。但当你体验到代码自动提示，自动检查，以及调试时精确定位到一行代码的好处时，就清楚 React 和 Vue 的差距了。</p>\n<h2 id=\"语法糖转换\">语法糖转换<a title=\"#语法糖转换\" href=\"#语法糖转换\"></a></h2>\n<p>习惯 Vue 的同学都知道很多语法糖，比如 <code>v-if</code>、<code>v-for</code>、<code>v-bind</code>、<code>v-on</code> 等，相比 Vue，React 只有一个语法糖，那就是 jsx/tsx。<code>v-if</code> 这些功能在 React 上都是通过原生 javascript 实现的，慢慢你会发现，其实你学的不是 React，而是 Javascipt，React 赋予你通过 js 完整控制组件的能力，这部分明显比 Vue 的语法糖更加灵活，糖太多容易引来虫子（Bug）。 <img src=\"https://content.hackertalk.net/emoji/g/64/1f606.png\" alt=\"satisfied\" loading=\"lazy\"></p>\n<h3 id=\"v-if-条件渲染\">v-if 条件渲染<a title=\"#v-if-条件渲染\" href=\"#v-if-条件渲染\"></a></h3>\n<p>vue 中写法是这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;awesome1&quot;</span>&gt;</span>Vue is awesome!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>else<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;awesome2&quot;</span>&gt;</span>Oh no<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">data</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">awesome1</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">awesome2</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 React 函数组件中只需这样：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [awesome1, setAwesome1] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [awesome2, setAwesome2] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;awesome1 ? <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>React is awesome!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> : <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Oh no<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;awesome2 &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>React is awesome!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>只需使用 js 三目运算符语法即可完成条件渲染的功能。或者使用 &amp;&amp; 逻辑，记住下面一句话就能过理解了：</p>\n<blockquote>\n<p>遇到 <code>&#123;&#125;</code> 符号内部解析为 JS 代码，遇到成对的 <code>&lt;&gt;</code> 符号内部解析为 HTML 代码</p>\n</blockquote>\n<h3 id=\"v-for-列表渲染\">v-for 列表渲染<a title=\"#v-for-列表渲染\" href=\"#v-for-列表渲染\"></a></h3>\n<p>Vue 中写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;array-rendering&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">items</span>: [&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Foo&#x27;</span> &#125;, &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Bar&#x27;</span> &#125;]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 写法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = <span class=\"title function_\">useState</span>([&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Foo&#x27;</span> &#125;, &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Bar&#x27;</span> &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;array-rendering&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;items.map((item, id) =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;id&#125;</span>&gt;</span>&#123;item.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>React 通过 js 的数组语法 map，将数据对象映射为 DOM 对象。只需学会 js，无需记住各种指令，如果要做列表过滤，直接使用 <code>items.filter(...).map(...)</code> 链式调用即可，语法上更加灵活，如果为了提高渲染性能，使用 useMemo 进行优化即可，类似 Vue 的 computed。</p>\n<h3 id=\"v-model\">v-model<a title=\"#v-model\" href=\"#v-model\"></a></h3>\n<p>Vue 中 v-model 是一个数据绑定语法糖，本质上还是单向数据流，下面的子组件通过 update:title 同步 title 参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"title class_\">String</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;update:title&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input</span></span><br><span class=\"line\"><span class=\"string\">      type=&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"string\">      :value=&quot;title&quot;</span></span><br><span class=\"line\"><span class=\"string\">      @input=&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>React 写法较为简单，不需要像 Vue 一样填鸭代码，记住各种规则，所有数据和事件通过 props 传递就行了：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Props</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">onUpdateTitle</span>: <span class=\"function\">(<span class=\"params\">title: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props: Props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">value</span>=<span class=\"string\">&#123;props.title&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">onInput</span>=<span class=\"string\">&#123;e</span> =&gt;</span> props.onUpdateTitle(e.target.value)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  /&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更加容易整合 typescript 实现类型推断，需要的逻辑都由 JS 完成，无需记住各种指令、使用方法，参数命名规则。</p>\n<h2 id=\"事件处理\">事件处理<a title=\"#事件处理\" href=\"#事件处理\"></a></h2>\n<p>Vue 中写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inline-handler&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">say</span>(<span class=\"params\">message</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">alert</span>(message)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 写法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onClick</span> = (<span class=\"params\">message</span>) =&gt; <span class=\"function\">() =&gt;</span> <span class=\"title function_\">alert</span>(message);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inline-handler&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick(</span>&#x27;<span class=\"attr\">hi</span>&#x27;)&#125;&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick(</span>&#x27;<span class=\"attr\">what</span>&#x27;)&#125;&gt;</span>Say what<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>这里用了函数<a href=\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\" target=\"_blank\">柯里化</a>，一般事件处理这样就行了：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onClick</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inline-handler&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>如果需要优化缓存事件处理函数，使用 useCallback 即可。可以看到 Vue 中的事件触发 <code>this.$emit('click')</code> 或者父组件中的代码 <code>v-on=&quot;say('hi')&quot;</code> 都使用了字符串的写法，这样非常不利于类型推断，不利于代码重构。React 的函数写法或者 class 写法都直接使用 js 语法，没有而外的东西，相比 Vue 更容易通过 IDE 进行重构优化。React 中无论方法还是变量，都是采用驼峰命名法，也可以自由定制，Vue 中必须混合小写中隔线、驼峰、字符串组合，不利于统一代码规范。</p>\n<h2 id=\"插槽\">插槽<a title=\"#插槽\" href=\"#插槽\"></a></h2>\n<p>Vue 中写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-primary&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 写法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&quot;btn-primary&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>React 的插槽写法没有 Vue 那么复杂，也没有“备用内容”、“具名插槽”、“渲染作用域”、“作用域插槽”、“动态插槽名”，这些概念和特殊情况的处理，一切通过 JS 逻辑搞定就行了，怎么方便怎么来，比如备用内容的实现：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认情况下使用 Summit 作为按钮文字</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">classNames</span>=<span class=\"string\">&quot;btn-primary&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.children === null ? &#x27;Summit&#x27; : props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式-&amp;-属性\">样式 &amp; 属性<a title=\"#样式-&amp;-属性\" href=\"#样式-&amp;-属性\"></a></h2>\n<p>这部分 Vue 的写法实在是太麻烦了。。。每次我都要查查文档具体怎么用，对象语法、数组语法、内联样式，要记住的有点多，Vue 动态修改样式的写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 写法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isActive, setIsActive] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [hasError, setHasError] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">classNames</span>=<span class=\"string\">&#123;</span>`<span class=\"attr\">static</span> $&#123;<span class=\"attr\">isActive</span> ? &#x27;<span class=\"attr\">active</span>&#x27;<span class=\"attr\">:</span>&#x27;&#125; $&#123;<span class=\"attr\">hasError</span>? &#x27;<span class=\"attr\">text-danger</span>&#x27;<span class=\"attr\">:</span>&#x27;&#x27;&#125;`&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>React 里面直接采用 JS 的模板字符串语法，如果样式太多，可以使用 <a href=\"https://github.com/JedWatson/classnames\" target=\"_blank\">classnames</a> 这个 npm 包，优雅传递各种状态，使用非常简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">classNames</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>); <span class=\"comment\">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">classNames</span>(<span class=\"string\">&#x27;foo&#x27;</span>, &#123; <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">classNames</span>(&#123; <span class=\"string\">&#x27;foo-bar&#x27;</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; &#x27;foo-bar&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">classNames</span>(&#123; <span class=\"string\">&#x27;foo-bar&#x27;</span>: <span class=\"literal\">false</span> &#125;); <span class=\"comment\">// =&gt; &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">classNames</span>(&#123; <span class=\"attr\">foo</span>: <span class=\"literal\">true</span> &#125;, &#123; <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; &#x27;foo bar&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">classNames</span>(&#123; <span class=\"attr\">foo</span>: <span class=\"literal\">true</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; &#x27;foo bar&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"状态管理\">状态管理<a title=\"#状态管理\" href=\"#状态管理\"></a></h2>\n<p>Vue 的状态管理官方推荐使用 Vuex 也可采用 Redux。</p>\n<p><img src=\"https://content.markdowner.net/pub/ayGdm8-E9W8vL0\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>引用官方文档一段话：</p>\n<blockquote>\n<p>如果你是来自 React 的开发者，可能会对 Vuex 和 Redux 间的差异表示关注，Redux 是 React 生态环境中最流行的 Flux 实现。Redux 事实上无法感知视图层，所以它能够轻松的通过一些简单绑定和 Vue 一起使用。Vuex 区别在于它是一个专门为 Vue 应用所设计。这使得它能够更好地和 Vue 进行整合，同时提供简洁的 API 和更好的开发体验。</p>\n</blockquote>\n<p>这段话其实暴露了 Vuex 的一个缺陷，它和 Vue 强绑定，无法独立存在，这种一些项目升级和迁移时会有很大的麻烦。Redux 作为 React 的状态管理方案之一其实不依赖于 React。</p>\n<p>React 周边的状态管理方案特别多，如 <a href=\"https://redux.js.org/\" target=\"_blank\">Redux</a>、<a href=\"https://mobx.js.org/README.html\" target=\"_blank\">Mobx</a>、<a href=\"https://recoiljs.org/\" target=\"_blank\">Recoil</a> 等，各有各的亮点，其中使用最多的应该是 Redux。</p>\n<p><img src=\"https://content.markdowner.net/pub/N60Y8m-B496n8n\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Redux 周边生态也很丰富，可以更加下图选择不同的方案：</p>\n<p><img src=\"https://content.markdowner.net/pub/1Bj2wp-BqwjqgE\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\">redux-thunk</a></li>\n<li><a href=\"https://github.com/redux-utilities/redux-promise\" target=\"_blank\">redux-promise</a></li>\n<li><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\">redux-saga</a></li>\n<li><a href=\"https://redux-observable.js.org/\" target=\"_blank\">redux-observable</a></li>\n</ul>\n<p>由于这部分代码较多，不详细写，不过如果你熟悉 Vuex 的概念，转到 Redux 应该不难。Vuex + axios 的做法和 Redux + redux-thunk 的写法类似，不过现在 redux-saga 的方案被更多复杂项目采用，其中很重要的原因是 saga 的概念编写异步代码非常优雅，且能够很好地解决<a href=\"https://efe.baidu.com/blog/defusing-race-conditions-when-using-promises/\" target=\"_blank\">竟态问题</a>（如果采用 Vuex + axios 的写法会异常复杂、冗长），高度定制。</p>\n<p>如果你要迁移 Vue 到 React，建议采用的方案是 Redux + saga，saga 的概念不是那么容易懂，学习需要一些时间，但当你学会的时候就会明白这种写法比直接用 Promise 好太多了。</p>\n<h2 id=\"生命周期\">生命周期<a title=\"#生命周期\" href=\"#生命周期\"></a></h2>\n<p>Vue 的生命周期这里不再重复，查询官方文档即可，React 生命周期如图：</p>\n<p><img src=\"https://content.markdowner.net/pub/wY5qBd-VX04gM0\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>图片可以在<a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\">这里</a>找到。一般情况下 class 写法主要用到 componentDidMount 和 componentWillUnmount 钩子，React 的函数写法下可以用 useEffect 的执行函数和清理函数去模拟 mount 和 unmount 过程：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;mounted&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;will unmount&#x27;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;/</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>useEffect 的原理这里不多说，可以看看相关文章：<a href=\"https://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html\" target=\"_blank\">轻松学会 React 钩子：以 useEffect() 为例</a>。其实从 React hook 中可以看到，React 在慢慢淡化生命周期的概念，减少自己对用户代码的侵入，将更多控制权交给用户。</p>\n<h2 id=\"原生-dom-操作\">原生 DOM 操作<a title=\"#原生-dom-操作\" href=\"#原生-dom-操作\"></a></h2>\n<p>这部分 Vue 和 React 都是采用 ref 写法，Vue：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;input&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">focusInput</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">input</span>.<span class=\"title function_\">focus</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">focusInput</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>React 写法：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useRef, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Index</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ref.<span class=\"property\">current</span>?.<span class=\"title function_\">focuse</span>();</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;ref&#125;/</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Index</span>;</span><br></pre></td></tr></table></figure>\n<p>useEffect 是 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\">React hook</a>，在依赖数组为空的时候效果类似 componentDidMount 的生命周期函数（类似 Vue 的 mounted）。此外 useRef 不止用在这里，也可以挂载一些其他的东东，实现一些复杂操作，比如 previousValue 和对象属性等。</p>\n<h2 id=\"路由\">路由<a title=\"#路由\" href=\"#路由\"></a></h2>\n<p>大部分项目都是采用 <a href=\"https://reactrouter.com/\" target=\"_blank\">react-router</a> 这个路由方案，定制能力强、API 丰富。</p>\n<h2 id=\"插件和工具\">插件和工具<a title=\"#插件和工具\" href=\"#插件和工具\"></a></h2>\n<p>浏览器安装 <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN&amp;from=hw798&amp;lid=407\" target=\"_blank\">React Develop tools</a> 和 <a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=zh-CN&amp;from=hw798&amp;lid=407\" target=\"_blank\">Redux DevTools</a> 两个插件即可。</p>\n","prev":{"title":"为Vue组件添加非响应式数据","link":"2022/04/27/为Vue组件添加非响应式数据"},"next":{"title":"Redis 快速上手","link":"2021/11/03/redis"},"plink":"https://becase.top/2022/04/25/vue转react快速上手/","toc":[{"id":"jsx","title":"JSX","index":"1"},{"id":"语法糖转换","title":"语法糖转换","index":"2","children":[{"id":"v-if-条件渲染","title":"v-if 条件渲染","index":"2.1"},{"id":"v-for-列表渲染","title":"v-for 列表渲染","index":"2.2"},{"id":"v-model","title":"v-model","index":"2.3"}]},{"id":"事件处理","title":"事件处理","index":"3"},{"id":"插槽","title":"插槽","index":"4"},{"id":"样式-&-属性","title":"样式 &amp; 属性","index":"5"},{"id":"状态管理","title":"状态管理","index":"6"},{"id":"生命周期","title":"生命周期","index":"7"},{"id":"原生-dom-操作","title":"原生 DOM 操作","index":"8"},{"id":"路由","title":"路由","index":"9"},{"id":"插件和工具","title":"插件和工具","index":"10"}],"reading_time":"2686 words in 18 min"}