{"title":"初识WebComponent","date":"2023-02-16T21:47:50.000Z","date_formatted":{"ll":"Feb 16, 2023","L":"02/16/2023","MM-DD":"02-16"},"link":"2023/02/16/初识WebComponent","comments":true,"tags":["WebComponent"],"categories":["front-end"],"updated":"2023-07-11T08:54:19.192Z","content":"<h2 id=\"背景\">背景<a title=\"#背景\" href=\"#背景\"></a></h2>\n<blockquote>\n<p><strong>组件化</strong> 已经成为目前主流的前端开发模式，其可复用性这一大特点是一众复制粘贴工程师的福音。目前我们实现组件化主要是依托于各大框架如 <strong>Vue</strong> ， <strong>React</strong> ， <strong>Angular</strong> 。这些框架基本都是在遵从浏览器的规则下制定出自己的一套开发规则和书写语法使开发者的项目获得组件化的能力</p>\n</blockquote>\n<p>随着近年来组件化框架的盛行，官方也推行了一套组件化的解决方案和原生API上的支持 —— <strong>Web Component</strong> 。</p>\n<h2 id=\"web-component-是什么\">Web Component 是什么<a title=\"#web-component-是什么\" href=\"#web-component-是什么\"></a></h2>\n<p><strong>Web Components</strong> 是一系列加入 <strong>w3c</strong> 的 <strong>HTML</strong> 和 <strong>DOM</strong> 的特性，使得开发者可以创建可复用的组件</p>\n<blockquote>\n<p>由于 <strong>web components</strong> 是由 <strong>w3c</strong> 组织去推动的，因此它很有可能在不久的将来成为浏览器的一个标配。</p>\n</blockquote>\n<p>关键字：<strong>原生、定制化标签</strong></p>\n<p>使用 <strong>Web Component</strong> 编写的组件是脱离框架的，换言之，也就是说使用 <strong>Web Component</strong> 开发的组件库，是适配所有框架的，不会像 <strong>Antd</strong> 这样需要对 <strong>Vue</strong> 、 <strong>React</strong> 等框架出不同的版本</p>\n<h2 id=\"使用-web-component\">使用 Web Component<a title=\"#使用-web-component\" href=\"#使用-web-component\"></a></h2>\n<h3 id=\"web-component-核心技术\">Web Component 核心技术<a title=\"#web-component-核心技术\" href=\"#web-component-核心技术\"></a></h3>\n<ul>\n<li><strong>Custom elements（自定义元素）</strong>：一组 <strong>JavaScript API</strong>，允许您定义 <strong>custom elements</strong> 及其行为，然后可以在您的用户界面中按照需要使用它们</li>\n<li><strong>Shadow DOM（影子DOM）</strong>：一组 <strong>JavaScript API</strong>，用于将封装的 <strong>“影子” DOM 树</strong> 附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突</li>\n<li><strong>HTML templates（HTML模板）</strong>： <strong>&lt; template &gt;</strong> 和 <strong>&lt; slot &gt;</strong> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用</li>\n<li><strong>HTML Imports（HTML导入）</strong>：一旦定义了 <strong>自定义组件</strong>，最简单的重用它的方法就是使其定义细节保存在一个单独的文件中，然后使用导入机制将其导入到想要实际使用它的页面中。 <strong>HTML</strong> 导入就是这样一种机制，尽管存在争议 — <strong>Mozilla</strong> 根本不同意这种方法，并打算在将来实现更合适的</li>\n</ul>\n<h3 id=\"实现一个简单的组件\">实现一个简单的组件<a title=\"#实现一个简单的组件\" href=\"#实现一个简单的组件\"></a></h3>\n<ol>\n<li>定义自定组件:<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">HTMLElement</span> </span>&#123;</span><br><span class=\"line\">\tconstructor () &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\tconst template = document.getElementById(&#x27;mybutton&#x27;);</span><br><span class=\"line\">\t\tconst content = template.content.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.appendChild(content);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>（神似 react）</p>\n<ol start=\"2\">\n<li>\n<p>定义组件模板:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mybutton&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>注册组件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">customElements</span>.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-button&#x27;</span>, <span class=\"title class_\">MyButton</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用组件:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">\t&lt;my-<span class=\"selector-tag\">button</span>&gt;&lt;/my-<span class=\"selector-tag\">button</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"selector-tag\">body</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样， 一个简单的 <strong>Web Component</strong> 就完成了。</p>\n<h3 id=\"生命周期\">生命周期<a title=\"#生命周期\" href=\"#生命周期\"></a></h3>\n<p>和一般框架中的组件一样，<strong>Web Component</strong> 的组件为了支持更多场景的应用也是有生命周期的。</p>\n<p>常用的生命周期方法如下:</p>\n<ul>\n<li><strong>connectedCallback</strong><br>\n当 <strong>web component</strong> 被添加到 <strong>DOM</strong> 时，会调用这个回调函数，这个函数只会被执行一次。可以在这个回调函数中完成一些初始化操作，比如更加参数设置组件的样式。</li>\n<li><strong>disconnectedCallback</strong><br>\n当 <strong>web component</strong> 从文档 <strong>DOM</strong> 中删除时执行。</li>\n<li><strong>adoptedCallback</strong><br>\n当 <strong>web component</strong> 被移动到新文档时执行。</li>\n<li><strong>attributeChangedCallback</strong><br>\n被监听的属性发生变化时执行</li>\n</ul>\n<h2 id=\"与react的结合\">与React的结合<a title=\"#与react的结合\" href=\"#与react的结合\"></a></h2>\n<p>就像刚刚所使用的，看起来 WebComponent 和 React 很想，但实际上二者是互补的关系</p>\n<p>React中使用的API都是声明式的，react封装了对DOM的操作并做了一定的优化； 而WebComponent中则是命令式的，它的方法都是基于原生DOM进行操作的（要不然咋说它是原生组件技术，doge）</p>\n<p>react官方也有说明，详情参考：<a href=\"https://react.docschina.org/docs/web-components.html\" target=\"_blank\">Web Components – React</a></p>\n<h3 id=\"在-web-component-中使用-react\">在 Web Component 中使用 React<a title=\"#在-web-component-中使用-react\" href=\"#在-web-component-中使用-react\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XSearch</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">connectedCallback</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mountPoint = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;span&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;).<span class=\"title function_\">appendChild</span>(mountPoint);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;https://www.google.com/search?q=&#x27;</span> + <span class=\"built_in\">encodeURIComponent</span>(name);</span><br><span class=\"line\">    <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;url&#125;</span>&gt;</span>&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span>, mountPoint);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;x-search&#x27;</span>, <span class=\"title class_\">XSearch</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-react-中使用-web-component\">在 React 中使用 Web Component<a title=\"#在-react-中使用-web-component\" href=\"#在-react-中使用-web-component\"></a></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloMessage</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;<span class=\"type\">Hello</span> &lt;x-search&gt;&#123;<span class=\"keyword\">this</span>.props.name&#125;&lt;/x-search&gt;!&lt;/div&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Web Components</strong> 的组件 <strong>video</strong> 可能会公开 <strong>play()</strong> 和 <strong>pause()</strong> 方法。要访问 <strong>Web Components</strong> 的命令式 <strong>API</strong>，你需要使用 <strong>ref</strong> 直接与 <strong>DOM</strong> 节点进行交互<br>\n如果你使用的是第三方 <strong>Web Components</strong>，那么最好的解决方案是编写 <strong>React</strong> 组件包装该 <strong>Web Components</strong>。</p>\n</blockquote>\n<p><strong>Web Components</strong> 触发的事件可能无法通过 <strong>React</strong> 渲染树正确的传递。 你需要在 <strong>React</strong> 组件中手动添加事件处理器来处理这些事件。</p>\n<h2 id=\"demo演示\">demo演示<a title=\"#demo演示\" href=\"#demo演示\"></a></h2>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63928cab8ae54cb5be882ec5eb1dc757~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63928cab8ae54cb5be882ec5eb1dc757~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" loading=\"lazy\" class=\"φbp\"></p>\n<p>如果我们想要实现原生组件复用，就需要把代码写在一个js文件里面，引入该js文件，就等于引入了组件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    //引入编写好的组件，在这里引入文件，注意要添加defer关键字</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./MyList/index.js&quot;</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        //使用组件</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-list</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;node&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--原生支持插槽  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>web component<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">my-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//因为是原生，所以我们需要获取dom节点行后续操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;node&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//我们将变量转换一下格式，就能传递给子组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      node.<span class=\"property\">dataset</span>.<span class=\"property\">arr</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>([<span class=\"string\">&quot;吃饭&quot;</span>, <span class=\"string\">&quot;睡觉&quot;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;template&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//在js文件中，我们想要书写html和css就必须要借助innerHTML，在其内部书写我们的样式和结构</span></span><br><span class=\"line\">template.<span class=\"property\">innerHTML</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    #contain &#123;</span></span><br><span class=\"line\"><span class=\"string\">      display: flex;</span></span><br><span class=\"line\"><span class=\"string\">      flex-direction: column</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    input &#123;</span></span><br><span class=\"line\"><span class=\"string\">      width: 200px</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div id=&quot;contain&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">     &lt;input type=&quot;text&quot; id=input&gt;</span></span><br><span class=\"line\"><span class=\"string\">     &lt;button id=&quot;mybutton&quot; data-text1=&quot;111111&quot;&gt;添加&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyList</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//因为我们的组件继承于HTMLElement，所以需要调用super关键字  </span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 获取标签</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> content = template.<span class=\"property\">content</span>.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mybutton = content.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;mybutton&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> input = content.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;input&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contain = content.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;contain&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取props</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">dataset</span>.<span class=\"property\">arr</span>);</span><br><span class=\"line\">   <span class=\"comment\">//进行事件的监听</span></span><br><span class=\"line\">    mybutton.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(input.<span class=\"property\">value</span>)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">      li.<span class=\"property\">innerText</span> = input.<span class=\"property\">value</span>;</span><br><span class=\"line\">      contain.<span class=\"title function_\">appendChild</span>(li);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 将数据渲染到页面</span></span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">      li.<span class=\"property\">innerText</span> = item;</span><br><span class=\"line\">      contain.<span class=\"title function_\">appendChild</span>(li);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">     <span class=\"comment\">//初始化一个影子dom</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&quot;closed&quot;</span> &#125;).<span class=\"title function_\">appendChild</span>(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注册组件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">customElements</span>.<span class=\"title function_\">define</span>(<span class=\"string\">&quot;my-list&quot;</span>, <span class=\"title class_\">MyList</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"相应框架\">相应框架<a title=\"#相应框架\" href=\"#相应框架\"></a></h2>\n<p>从上面的案例看的出来这种原生dom操作的开发效率还是太低，这里再推荐一个WebComponent的封装框架：<a href=\"https://stenciljs.com/\" target=\"_blank\">Stencil</a></p>\n<blockquote>\n<p>有人就疑惑了，WebComponent不是强调不依赖vue、react等框架吗？</p>\n</blockquote>\n<p>是的，它是不依赖vue、react等框架，但并不表示他不能像js拥有jQuery一样，拥有自己的封装库。<br>\n封装出来的<code>语法题</code>和强依赖的<code>运行环境</code>，二者的关系需要弄清楚</p>\n<h3 id=\"框架使用示例\">框架使用示例<a title=\"#框架使用示例\" href=\"#框架使用示例\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">Prop</span>, h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@stencil/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"title class_\">Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;my-component&#x27;</span>,            <span class=\"comment\">// the name of the component&#x27;s custom HTML tag</span></span><br><span class=\"line\">  <span class=\"attr\">styleUrl</span>: <span class=\"string\">&#x27;my-component.css&#x27;</span>,   <span class=\"comment\">// css styles to apply to the component</span></span><br><span class=\"line\">  <span class=\"attr\">shadow</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// this component uses the ShadowDOM</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The component accepts two arguments:</span></span><br><span class=\"line\">  @<span class=\"title class_\">Prop</span>() <span class=\"attr\">first</span>: string;</span><br><span class=\"line\">  @<span class=\"title class_\">Prop</span>() <span class=\"attr\">last</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//The following HTML is rendered when our component is used</span></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        Hello, my name is &#123;this.first&#125; &#123;this.last&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">first</span>=<span class=\"string\">&quot;Stencil&quot;</span> <span class=\"attr\">last</span>=<span class=\"string\">&quot;JS&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\" target=\"_blank\">Web Component | MDN</a></p>\n<p><a href=\"https://juejin.cn/post/7174289059521495071\" target=\"_blank\">Web Component入门</a></p>\n<p><a href=\"https://stenciljs.com/\" target=\"_blank\">Stencil</a></p>\n","prev":{"title":"新兴的Astro","link":"2023/04/23/新兴的Astro"},"next":{"title":"windows 系统的包管理器","link":"2023/01/17/windows系统的包管理器"},"plink":"https://becase.top/2023/02/16/初识WebComponent/","toc":[{"id":"背景","title":"背景","index":"1"},{"id":"web-component-是什么","title":"Web Component 是什么","index":"2"},{"id":"使用-web-component","title":"使用 Web Component","index":"3","children":[{"id":"web-component-核心技术","title":"Web Component 核心技术","index":"3.1"},{"id":"实现一个简单的组件","title":"实现一个简单的组件","index":"3.2"},{"id":"生命周期","title":"生命周期","index":"3.3"}]},{"id":"与react的结合","title":"与React的结合","index":"4","children":[{"id":"在-web-component-中使用-react","title":"在 Web Component 中使用 React","index":"4.1"},{"id":"在-react-中使用-web-component","title":"在 React 中使用 Web Component","index":"4.2"}]},{"id":"demo演示","title":"demo演示","index":"5"},{"id":"相应框架","title":"相应框架","index":"6","children":[{"id":"框架使用示例","title":"框架使用示例","index":"6.1"}]},{"id":"参考","title":"参考","index":"7"}],"reading_time":"1960 words in 13 min"}